---
title: "Trabalho Prático 2"
subtitle: "Análise de Séries Temporais - 1/2023" 
author:
  - Ana Carolina Vianna - 18/0097261
  - César Augusto Galvão - 19/0011572
  - Yan Flávio Vianna - 14/0166149
format: 
  pdf:
    toc: true
    keep-tex: true
    include-in-header:
      text: |
        \usepackage[auth-lg]{authblk}
execute:
  echo: false
  message: false
  warning: false
---

{{< pagebreak >}}

# Introdução: série selecionada, características e decomposição

```{r pacotes}
if(!("pacman" %in% installed.packages())){install.packages("pacman")}

pacman::p_load(Mcomp, tidyverse, forecast, fpp2, xts, tseries, tidymodels, kableExtra)

# #funcao not in para facilitar filtragens
# `%notin%` <- Negate(`%in%`)
```

```{r selecao-dados}
# T2 -> 2169 ou 2183

data(M3) #carrega os dados
id <- 2183 #série temporal escolhida

serie <- M3[[id]]

dados <- serie$x
```


A série temporal escolhida foi a de número *id* correspondente a `r id`. De acordo com a definição do próprio pacote, refere-se a *`r serie$description`*. Foram realizadas medidas mensais de 1983 a 1992 e o horizonte de previsão requerido é das 18 ocorrências seguintes.  

O gráfico da série, com *in* e *out-sample*, é exposto a seguir.

```{r plot-serie-total}

plot(serie, main = "Série Temporal M3-2183")

```

A série aparenta ter dois períodos, pelo menos: um ciclo anual e outro que compreende um período maior. No entanto, ao se tentar decompor a série com múltiplas sazonalidades, obté-se o seguinte:

* **Adicionando uma componente sazonal com ciclo menor que 1 ano** -- uma das componentes sazonais apresenta heteroscedasticidade;
* **Adicionando uma componente sazonal com ciclo maior que 1 ano** -- resíduos apresentam periodicidade ou heteroscedasticidade.

```{r decomposicao-mstl}
serie_ms <- forecast::msts(dados, seasonal.periods = c(12))

# media dos resíduos é em torno de 5. Considerando a magnitude dos dados que temos usando summary(dados), está próximo de zero o suficiente

#tentei períodos secundários, porém o melhor ajuste é com apenas um ciclo anual. Só é possível dois ciclos secundários completos para análise até quadrienal, mas até aí todos apresentam resíduos inadequados. 

decomp_mstl <- mstl(serie_ms, lambda = NULL, t.window = 9)

#ajustar com lambda = "auto" até agora não parece fazer qualquer diferença

```


Optou-se portanto pela decomposição STL (apesar de os dados terem inicialmente formado um objeto `msts`) apenas com a sazonalidade anual, mas fica evidente que esta decomposição não é adequada quando se avalia a componente de tendência, que aparenta ainda carregar algum componente periódico. Os resíduos aparentam um comportamento aleatório e têm média `r round(mean(decomp_mstl[,4]),3)`, o que é próximo de zero o suficiente considerando a magnitude dos dados da série. A decomposição é exposta a seguir.  


```{r grafico-mstl}

decomp_mstl %>% autoplot(main = "Decomposição MSTL com período anual simples") + labs(x = "Ano") + theme_bw()

```




# Modelos ARIMA: seleção, transformações e resíduos

COMENTAR
- para que serve diff normal e sazonal
- o que conseguimos depois de aplicar
- teste de estacionariedade
- deixar pronto para a modelagem

## Modelo sem transformação

### Seleção

```{r diff-arima}
ndiffs(serie_ms)
serie_ms %>% diff() %>% nsdiffs()

serie_ms_diff <- serie_ms %>% diff() %>% diff(lag = 12)
```

```{r acf-pacf-sem-transformacao, fig.height=3, fig.width = 8}
# Graficos de Autocorrelacao
par(mfrow=c(1,3))
plot(serie_ms_diff, main="Série com diferenças",ylab="")
acf(serie_ms_diff, lag=12*6, main="ACF")
pacf(serie_ms_diff, lag=12*6, main="PACF")
```

```{r aicc-sem-transformacao}
melhor_AICc <- Inf
for(p in 0:2){
  for(q in 0:2){
    for(P in 0:2){
      for(Q in 0:2){
        
        #cat("p =",p,", q =",q,", P =",P,", Q =",Q,"\n")
        
        tryCatch({fit <- Arima(serie_ms, order=c(p,1,q), seasonal=c(P,1,Q))}, error=function(e){cat("",conditionMessage(e), "\n")})
        
        if(fit$aicc <= melhor_AICc){
          melhor_AICc <- fit$aicc
          #cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")
          }
        
      }
    }
  }
}

melhor_AICc
```

-   Construção do modelo

O modelo selecionado foi ARIMA(2,1,2)x(0,1,2) para a série original e com transformação de Box-Cox.


### Resíduos


## Modelo com transformação

### Seleção

```{r transformacao}
autolambda <- BoxCox.lambda(dados)
dadosbc <- BoxCox(dados, lambda=autolambda)
par(mfrow=c(1,2))
plot(dados, main='Série Original',ylab='')
plot(dadosbc, main='Box-Cox',ylab='')
```

```{r diff-arima-transformado}
ndiffs(dadosbc)
dadosbc %>% diff() %>% nsdiffs()
dadosbctransf <- dadosbc %>% diff() %>% diff(lag = 12)
```

```{r acf-pacf-transformado}
par(mfrow=c(1,3))
plot(dadosbctransf, main="Série (boxcox) com diferenças",ylab="")
acf(dadosbctransf, lag=12*6, main="ACF")
pacf(dadosbctransf, lag=12*6, main="PACF")
```

```{r aicc-transformado}
melhor_AICc <- Inf
for(p in 0:2){
  for(q in 0:2){
    for(P in 0:2){
      for(Q in 0:2){
        cat("p =",p,", q =",q,", P =",P,", Q =",Q,"\n")
        tryCatch({fit <- Arima(dadosbc, order=c(p,1,q), seasonal=c(P,1,Q))}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
        if(fit$aicc <= melhor_AICc){
          melhor_AICc <- fit$aicc
          cat("p =",p,", q =",q,", P =",P,", Q =",Q,", AICc =",fit$aicc,"\n")}
        
      }
    }
  }
}

melhor_AICc
```



### Resíduos


# Modelos ETS: seleção, transformações e resíduos

## Modelo sem transformação

### Seleção

```{r selecao-ETS-sem-transf}
# monta as combinações possíveis de modelo ets
model <- expand_grid(v1 = c("A", "M", "N"), v2 = c("A", "M", "N"), v3 = c("A", "M", "N")) %>%
  mutate(modelo = str_c(v1,v2,v3)) %>%
  select(modelo) %>%
  unique() %>%
  expand_grid(., damp = c(TRUE, FALSE))
# N, A, M, + damped


#funcao pra montar indicadores do modelo
criterios <- function(modelo, damp) { 
  ETS <- ets(dados, model = modelo, damped = damp)
  #usamos o objeto dados como um padrao
  
  tabela <- tibble(
    nome = modelo,
    sigla = str_c("ETS(", str_c(substr(modelo,1,1),  substr(modelo,2,2), substr(modelo,3,3), sep = ","), ")"),
    damped = damp,
    AIC = ETS$aic, 
    AICc = ETS$aicc, 
    BIC = ETS$bic)
  
  return(tabela)
}


#selecionando modelos permitidos pela funcao ets
# for(i in 1:length(model$modelo)){
#   print(i)
#   print(try({ets(dados, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
# }

selecionados <- c(1, 2, 5, 6, 14, 18:24, 27:30, 32, 34, 36)

model_select <- model[selecionados,]

tabela_modelos_ETS <- map2_df(model_select$modelo, model_select$damp, criterios) %>%
  arrange(AIC) %>%
  mutate(modelo = case_when(
    damped == TRUE ~ str_replace(sigla, "A", "Ad"),
    .default = sigla
  ))

tabela_modelos_ETS %>%
  select("Modelo"= modelo, AIC:BIC)%>%
  head(10) %>%
  knitr::kable(
    format = "latex",
    align = c("lccc"),
    booktabs = TRUE,
    longtable = TRUE,
    linesep = "",
    escape = FALSE,
    digits = 2
    ) %>%
  kableExtra::kable_styling(
      position = "center",
      latex_options = c("striped", "repeat_header"),
      stripe_color = "gray!15")

```

```{r melhor-fit-ETL-sem-transf}

# decomposicao ETS sem transformacao ----
fit_ets <- ets(dados, model = "MAM", damped = TRUE)

plot(fit_ets)

```


### Resíduos

```{r residuos-ets-sem-transform}

#ESSE É O CODIGO DO TRABALHO QUE CONSEGUIMOS, TEM QUE TROCAR OS OBJETOS

# Análise de resíduos ETS sem transformação
# E <- fit1$residuals
# par(mfrow=c(2,2))
# plot(E)
# acf(E)
# pacf(E)
# qqnorm(E)
# qqline(E)
# # Testes para ETS sem transformação
# p_valor <- c(shapiro.test(E)$p.value,kpss.test(E)$p.value,
# Box.test(E,lag=15,type="Ljung-Box",fitdf=3)$p.value)
# Estatistica <- c(shapiro.test(E)$statistic,kpss.test(E)$statistic,
# Box.test(E,lag=15,type="Ljung-Box",fitdf=3)$statistic)
# Teste <- c("Normalidade","Estacionariedade","Independencia")
# d <- data.frame(Estatistica,p_valor)
# knitr::kable(d)
```



## Modelo com transformação

### Seleção

a série com transformacao

```{r ETS-com-transf}
# avalia valor de lambda da transformacao boxcox
lambda <- dados %>% BoxCox.lambda()

dados_box <- dados %>% BoxCox(lambda)

# visualização e decomp da ETS com transformação
plot(dados_box,main= parse(text = paste0('"Série com transformação Box-Cox  "', '~ lambda == ', round(lambda, 3))))

```

decomposicao

```{r decomposicao-ets-com-transformacao}
mstl(dados_box)%>%plot(main = "Decomposição da série com transformação Box-Cox")
```
selecao do modelo com transformação

```{r selecao-ETS-com-transformacao}
# for(i in 1:length(model$modelo)){
#   print(i)
#   print(try({ets(dados_box, model = model$modelo[i], damped = model$damp[i])}, silent = TRUE))
# }

selecionados_transf <- c(1, 2, 5, 6, 14, 18, 19:24, 27:30, 32, 34, 36)

model_select_transf <- model[selecionados_transf,]

tabela_modelos_ETS_transf <- map2_df(model_select_transf$modelo, model_select_transf$damp, criterios) %>%
  arrange(AIC) %>%
  mutate(modelo = case_when(
    damped == TRUE ~ str_replace(sigla, "A", "Ad"),
    .default = sigla
  ))

tabela_modelos_ETS_transf %>%
  select("Modelo transformado"= modelo, AIC:BIC)%>%
  head(10) %>%
  knitr::kable(
    format = "latex",
    align = c("lccc"),
    booktabs = TRUE,
    longtable = TRUE,
    linesep = "",
    escape = FALSE,
    digits = 2
    ) %>%
  kableExtra::kable_styling(
      position = "center",
      latex_options = c("striped", "repeat_header"),
      stripe_color = "gray!15")
```

OS MODELOS SAO OS MESMO, PODEMO SELECIONAR O SEGUNDO MELHOR


### Resíduos

```{r resíduos-modelo-transformado}



```



# Estudo de desempenho preditivo

## Resultados da Janela Deslizante

## Performance em relação aos horizontes de previsão

### ARIMA

### ETS

# Resultados

apresente em tabelas e gráficos as previsões dos 4 modelos selecionados e também apresente em uma tabela os resultados de acurácia dos 4 modelos selecionados e dos modelos benchmarks. Comente os resultados de modo objetivo;

# Apêndice

Todo o projeto de composição deste documento pode ser encontrado aqui: https://github.com/cesar-galvao/trabalhos_series

```{r codigo, eval = FALSE, echo = TRUE}

```
